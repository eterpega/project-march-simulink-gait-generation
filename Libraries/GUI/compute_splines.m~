function [gait, phase, angleHip_deg,angleKnee_deg, x, y,...
    angleHip_RPM, angleKnee_RPM, angleHip_rads2, angleKnee_rads2, time, samplePointAmount]=compute_splines(handles, selected)
%% First give an input which design spline has bee slected
%[hip, knee, x, y]
if selected==[1, 1, 0, 0]
    keyEvent1 = get_gait_data(handles,'hip');
    keyEvent2 = get_gait_data(handles,'knee');
    convFact1 = 180/pi;
    convFact2 = 180/pi;
elseif selected==[0, 0, 1, 1]
    keyEvent1 = get_gait_data(handles,'x');
    keyEvent2 = get_gait_data(handles,'y'); 
    convFact1 = 1;
    convFact2 = 1;
elseif selected==[0, 1, 1, 0]
    keyEvent1 = get_gait_data(handles,'knee');
    keyEvent2 = get_gait_data(handles,'x'); 
    convFact1 = 180/pi;
    convFact2 = 1;
else
    error('ERROR: parameter selection not valid for compute_splines')
end

% Create phase vector. 
global sampleFrequency stepTime stepLength stepVel
strideTime = stepTime*2; %[s]
samplePointAmount = strideTime*sampleFrequency; %this will determine the speed
tInterval = strideTime/samplePointAmount; %[s] The difference in time between each interval

phase = linspace(0,99.9,samplePointAmount); %[%] Phase goes from 0 to 99.9... %
phaseToTime = strideTime/100;
time = phase*phaseToTime; %[s] Time vector

%% Move key events
% The first key event is copied and moved 100% further so a continious gait
% can be generated.
global gaitType
if strcmpi(gaitType,'Continious')
    keyEvent1 = add_last_key_event(keyEvent1);
    keyEvent2 = add_last_key_event(keyEvent2);
elseif strcmpi(gaitType, 'Discontinous')
else(
end


%% Check keyEvents
key_event_checker(keyEvent1, phaseToTime, 1, selected);
key_event_checker(keyEvent2, phaseToTime, 2, selected);

%% Calculate Gait
[hip, knee, x, y, foot, stanceLegRight, stanceLegLeft, stepLength, spline1Limit, spline2Limit] = gait_calculator(keyEvent1, keyEvent2, selected, phase, tInterval);
%x.x
%y.y
%% Check gait
gait_checker(hip, knee, x, y, foot, stanceLegRight, stanceLegLeft, stepLength);
%Gait parameters for GUI
stepVel=stepLength/stepTime;
set(handles.stepLength,'String',num2str(stepLength));
set(handles.stepVel,'String',num2str(stepVel));

%% Process data

%angleHip
angleHip_deg = hip.angleHip/(2*pi)*360; %[deg]
angleHip_RPM = hip.dangleHip/(2*pi)*60; %[RPM]
angleHip_rads2 = hip.ddangleHip; %[rad/s^2]

%angleKnee
angleKnee_deg = knee.angleKnee/(2*pi)*360; %[deg]
angleKnee_RPM = knee.dangleKnee/(2*pi)*60; %[RPM]
angleKnee_rads2 = knee.ddangleKnee; %[rad/s^2]

%Make spline vectors [x y]
gait.splineHip=[phase', angleHip_deg];
gait.splineKnee=[phase', angleKnee_deg];
gait.splineX=[phase', x.x];
gait.splineY=[phase', y.y];
gait.spline1Limit=spline1Limit;
gait.spline2Limit=spline2Limit;

draw_splines(handles,gait,selected)
end